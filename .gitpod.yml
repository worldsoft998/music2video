# This configuration file was automatically generated by Gitpod.
# Please adjust to your needs (see https://www.gitpod.io/docs/introduction/learn-gitpod/gitpod-yaml)
# and commit this file to your remote git repository to share the goodness with others.

# Learn more from ready-to-use templates: https://www.gitpod.io/docs/introduction/getting-started/quickstart

# image:
    # file: .dockerfile
    
# image: gitpod/workspace-cuda
# image: gitpod/workspace-postgres
# image: ubuntu:latest

image: gitpod/workspace-full 


tasks:
#   - name: Install CUDA
#     init: |
      # Install prerequisites (e.g., build-essential for compilation)
#       sudo apt-get update
#       sudo apt-get install -y build-essential wget

      # Download and install CUDA keyring (for Ubuntu 22.04; use ubuntu2404 for 24.04 if upgraded)
#       wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
#       sudo dpkg -i cuda-keyring_1.1-1_all.deb

      # Update package list and install CUDA toolkit (excludes drivers, as Gitpod VMs lack GPUs)
#       sudo apt-get update
#       sudo apt-get install -y cuda-toolkit-12-6

      # Set environment variables (add to ~/.bashrc for persistence)
#       echo 'export PATH=/usr/local/cuda-12.6/bin${PATH:+:${PATH}}' >> ~/.bashrc
#       echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc
#       source ~/.bashrc

      # Optional: Install sample dependencies for testing
#       sudo apt-get install -y g++ freeglut3-dev libx11-dev libxmu-dev libxi-dev libglu1-mesa-dev libfreeimage-dev libglfw3-dev

#     command: |
      # Verify installation (should print CUDA version)
#       nvcc --version
#       echo "CUDA installation complete! Run 'nvidia-smi' to check drivers (may fail without GPU)."


    
# tasks: 
#     - name: Install CUDA
#       init:  |
#         sudo apt-get update
#         sudo apt-get install -y cuda
#       command: |
#         echo "CUDA installation complete"

  - name: Install curl
    init:  |
         sudo apt-get update
         sudo apt-get install -y curl
    command: |
         echo "curl installation complete"
         
         
         git clone 'https://github.com/nerdyrodent/VQGAN-CLIP'
         cd VQGAN-CLIP
         git clone 'https://github.com/openai/CLIP'
         git clone 'https://github.com/CompVis/taming-transformers'
         cd ..
         
         mkdir checkpoints
         
         curl -L -o checkpoints/vqgan_imagenet_f16_16384.yaml -C - "https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/files/?p=%2Fconfigs%2Fmodel.yaml&dl=1"#ImageNet 16384
         
         curl -L -o checkpoints/vqgan_imagenet_f16_16384.ckpt -C - 'https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/files/?p=%2Fckpts%2Flast.ckpt&dl=1' #ImageNet 16384


#   - name: Install required packages 
#     init: pip install --upgrade setuptools
#     command: |
#          echo "setuptools installation complete"
    
  - name: Install requirements2 and run  
    init: pip install -r requirements3.txt
    command:  |
         echo "requirements2.txt installation complete"
         python generate.py -cd "cpu0" -vid -o outputs/output.png -ap "imagenet_song.mp3" -lyr "lyrics/imagenet_song_lyrics.csv" -gid 2 -ips 100
    
    # command: python audio_to_video_converter.py
    # command: gp open main.ipynb


# vscode:
#     extensions:
#         - ms-toolsai.jupyter
#         - ms-python.python

# github:
#   prebuilds:
#     master: true
#     branches: true
#     pullRequests: true
#     pullRequestsFromForks: true

# ports:
#  - port: 7860
#    onOpen: open-preview
